README instructions for running zoom
Version 1
---------------------------------------------------
Running instructions for version 1
---------------------------------------------------
1.  compile zoom by: make all
2.  install module by: sudo insmod zoom.ko
3.  get the character device number by: cat /proc/devices | grep tstdvr
4.  install a device file by:  sudo mknod node c <device #> 0
5.  give character device proper permissions by:  sudo chmod 666 node
6.  run a process by:  work   # Note:  check argument list for options
7.  download data by: ./monitor ><output file>
8.  uninstall module by:  sudo rmmod zoom
9.  The output data will be stored in the <output file>
-----------------------------------------------------
Capabilities include:
- ability to allow a process to register and unregister with the module
- monitor process during running to capture performance parameters with memory
- parameters are mapped to user-space memory for recording
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Updates made to version 2
------------------------------------------------------
Requirement:  Add signal from kernel sent to processes to notify memory pressure condition
------------------------------------------------------
1.  Change reported values in memory map to PID, delta minor page faults, delta major page faults, rss
2.  Add signal when rss gets above threshold value
3.  Add a memory pressure structure that is updated every work queue event
4.  Add signal handling to the work code so that something is printed to screen upon signal receipt
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Updates made to version 3
------------------------------------------------------
Requirement:  Need to improve the work program to allow for children to be spawned
------------------------------------------------------
1.  Modified work to allow children to be spawned based on an additional command line argument
2.  Fixed small bug in zoom that didn't allow multiple processes to register
3.  Modified print output for monitor for correct titles and tabbed out lines
4.  Fixed a bug with signal to make sure memory pressure is reset when all processes are unregistered
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Updates made to version 4
------------------------------------------------------
Requirement:  Improve the signal handling from the zoom module
------------------------------------------------------
1.  Reorganized the memory pressure handling into three routines:  one for calculating pressure, one for determining state and one for sending signal.
There are four states currently:  low, medium, high and emergency (These definitions are arbitrary and can be changed in the code).
2.  The work code recognizes the pressure state using the errno variable of the siginfo variable.
3.  The zoom code was updated to place the pressure state into the siginfo errno.
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Updates made to version 5
------------------------------------------------------
Requirement:  Program the work program to react to memory pressure
------------------------------------------------------
1.  Added a function within the work program to free memory at 10% increments (based on pressure state) until the memory pressure level is low.
2.  Added a global that stores current pressure state as received from kernel.
3.  Modified the signal handler to store the pressure state.
------------------------------------------------------
Results observed:
1.  Running two instances of work, when a memory pressure state was entered, both processes freed memory (reducing rss) until a low pressure state occurred.  
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Updates made to version 6
------------------------------------------------------
Requirement:  Program the work program to be able to customize children
------------------------------------------------------
1.  Added the capability for the work program to parse a file in the CWD named children.properties
2.  Added the capability to print the input from file to screen for checking
3.  Placed initial delays and iterative delays in code so that each process doesn't access data at same speed
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Updates made to version 7
------------------------------------------------------
Requirement:  Improve work program in various ways
------------------------------------------------------
1.  Added a third column to children.properties allowing process to apply relief or not
2.  Converted the delays in children.properties from seconds to milliseconds for finer control
3.  Plotted a result of showing the effect of memory handling versus no memory handling
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Updates made to version 8
------------------------------------------------------
Requirement:  Improve memory pressure handling
------------------------------------------------------
1.  Implemented restoration back to original memory levels if memory pressure is relieved.
2.  Made recovery percent adjustable in the children.properties file.
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Summary of current capability of zoom:
1.  Have a work program that has random access capability that can spawn up to 100 children.  There are adjustable delays (sleeps) starting and between
iterations.  The programs can receive signals from zoom and perform memory relief.  If memory has been reduced due to memory relief, the memory will attempt
to expand back if system goes back to low memory pressure.  
2.  Zoom will allow any process to register itself and will monitor the total RSS of all registered processes.  If this total exceeds certain thresholds,
a signal will be sent to all registered processes asking for memory relief.  When a different threshold is crossed, a different signal is sent.
3.  The monitor program will access a character device and read from mapped memory and receive any stats that zoom wants to pass to it.
IN SHORT, we can show that cooperative processes that are capable of freeing memory (i.e. pages) can give relief to memory pressure.  The shortcoming with
this is that all processes may not be able to free pages and be expected to function properly.
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Updates made to version 9
------------------------------------------------------
Requirement:  Add gradient signaling to zoom (large increment swings in memory are flagged)
------------------------------------------------------
1.  Changed signaling in zoom to indicate gradient level
2.  Changed signaling in work to receive gradient level.
Note:  This was done a bit sloppy and needs to be cleaned up a bit.  
Bottom line:  it works for now.
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Updates made to version 10
------------------------------------------------------
Requirement:  A technique I would like to call "selective emphasis" is employed here.  The idea is that the two worst memory 
offenders get an extra signal so that they know that they are the ones with the most to give
------------------------------------------------------
1.  Added code to zoom to send offset on error code for top two processes with highest rss. 
2.  Added code for work to handle offset and process top offender for top two processes.
3.  Added switches in zoom code to activate gradient notification as well as selective emphasis notification.
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Updates made to version 11
------------------------------------------------------
Requirement:  Miscellaneous improvements here
------------------------------------------------------
1.  Created a test case with 20 processes running over 45 seconds or so.
2.  Created a counter in zoom that deals counts if pressure does not reduce over a certain time and resends signals.
3.  Created a flag for turning off memory pressure handling in zoom.
4.  Added signaling if a process is registered during elevated memory pressure.
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Updates made to version 12
------------------------------------------------------
Requirement:  Improve forensics for improved testing
------------------------------------------------------
1.  Added debug option to turn off print statement for work.
2.  Added reporting for virtual memory total for each process in zoom.
3.  Added writing of virtual memory for monitor program.
4.  Added reporting of start and end time for initial sleep to check that forks start at proper time.
5.  Created options on zoom to change the output values for the memory mapping.  Start with process by process default.
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Updates made to version 13
------------------------------------------------------
Requirement:  Improve monitoring program
------------------------------------------------------
1.  Added two arguments to monitoring program to write output directly to file.  One is raw the other is results.
2.  Changed program to only read good data and ignore garbage.
3.  Summary file outputs the total VM and RSS.
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Updates made to version 14
------------------------------------------------------
Requirement:  Implement automated testing
------------------------------------------------------
1.  Created auto_test.py to set up runs at scripting level.  Runs work, performs data download and will massage output.
2.  Fixed a bug in monitor for opening files.  (I hate c-strings)
3.  Improved auto test to set case in a single line
4.  Modified zoom to be able to set the memory pressure handling mode by a proc file write
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Updates made to version 15
------------------------------------------------------
Requirement:  Perform significant testing and debugging
------------------------------------------------------
1.  Added output to /var/log/messages for selection of memory pressure mode.
2.  Fixed a bug with memory pressure handling selection in zoom.
3.  (TODO) figure out why work spawns from start for all children
4.  Fixed a bug in reporting rss in zoom.
5.  Added functionality in the auto_test.py to modify the mem pressure handling state via functions
6.  Medium, high and emergency pressure all can be specified via proc file system in zoom
7.  Added memory size specification in children.properties file (work.c reads and handles properly)
8.  Worked around an issue with an extra amount of sleep in work.  Need to figure out more elegant solution later.
9.  (TODO)  Need to solve mmap wrapping issue.  (Probably an issue with the monitor program).